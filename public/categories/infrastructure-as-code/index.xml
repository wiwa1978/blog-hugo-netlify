<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infrastructure As Code on Technology Blog Wim</title>
    <link>/categories/infrastructure-as-code/</link>
    <description>Recent content in Infrastructure As Code on Technology Blog Wim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Mar 2020 22:32:50 +0100</lastBuildDate>
    
	<atom:link href="/categories/infrastructure-as-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Cisco ACI network with Python (ACI toolkit)</title>
      <link>/networkprogrammability/2020-03-21-aci_python_acitookit/</link>
      <pubDate>Sat, 21 Mar 2020 22:32:50 +0100</pubDate>
      
      <guid>/networkprogrammability/2020-03-21-aci_python_acitookit/</guid>
      <description>Introduction In this post, we have seen how to create some ACI objects using Python and Jinja2. While this was relatively straightforward, it&amp;rsquo;s not always as straigthforward as it seems.</description>
    </item>
    
    <item>
      <title>Interact with Cisco ACI network through Python (Requests)</title>
      <link>/networkprogrammability/2020-03-19-aci_python_requests/</link>
      <pubDate>Thu, 19 Mar 2020 07:39:50 +0100</pubDate>
      
      <guid>/networkprogrammability/2020-03-19-aci_python_requests/</guid>
      <description>Introduction In this blog post, we will address how we can use Python to work with Cisco ACI. It&amp;rsquo;ll focus on the very basics, trusting it gives you enough meat to tackle the more complex tasks on your own (e.</description>
    </item>
    
    <item>
      <title>Create VM on vSphere and network on Cisco ACI (using Terraform)</title>
      <link>/devops/2019-12-03-aci_vsphere_terraform/</link>
      <pubDate>Tue, 03 Dec 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-12-03-aci_vsphere_terraform/</guid>
      <description>Introduction In past couple of posts, we have been experimenting with Terraform in combination with ACI and vSphere seperately. In this post, we will combine both and we will first create network constructs on Cisco&amp;rsquo;s ACI solution and once done, we will create two VM instances on vSphere that are actually using the underlying ACI network constructs.</description>
    </item>
    
    <item>
      <title>vSphere - Install Kubernetes using Ansible</title>
      <link>/devops/2019-12-02_vsphere_kubernetes_ansible/</link>
      <pubDate>Mon, 02 Dec 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-12-02_vsphere_kubernetes_ansible/</guid>
      <description>Introduction In this post, we created a couple of virtual instances running on vSphere using Terraform. We will use that blog post as a reference to install 3 virtual servers on our vSphere environment.</description>
    </item>
    
    <item>
      <title>vSphere - Create VMs with Terraform</title>
      <link>/devops/2019-12-01-vsphere_terraform/</link>
      <pubDate>Sun, 01 Dec 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-12-01-vsphere_terraform/</guid>
      <description>Introduction In this post and this post, we created respectively some EC2 instances on AWS and some network contructs on Cisco’s ACI solution.</description>
    </item>
    
    <item>
      <title>Create Cisco ACI network with Terraform and Gitlab CICD</title>
      <link>/devops/2019-11-29-aci_terraform_gitlab/</link>
      <pubDate>Fri, 29 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-29-aci_terraform_gitlab/</guid>
      <description>Introduction As promised, we’ll configure an ACI network using a CI/CD pipeline. If you understood this post, you’ll easily grasp this one as well.</description>
    </item>
    
    <item>
      <title>Create Cisco ACI network with Terraform</title>
      <link>/devops/2019-11-27-aci_terraform/</link>
      <pubDate>Wed, 27 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-27-aci_terraform/</guid>
      <description>Introduction In this post, we created some EC2 instances on AWS. In this post, we will apply the same principle but instead of creating some servers on AWS, we will create a network on Cisco’s ACI solution using Terraform’s ACI provider.</description>
    </item>
    
    <item>
      <title>AWS - Install Kubernetes using Ansible</title>
      <link>/devops/2019-11-25-aws_kubernetes_ansible/</link>
      <pubDate>Mon, 25 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-25-aws_kubernetes_ansible/</guid>
      <description>Quick note: the original post dates from 25-11-2019 but got updated at 01-04-2020 with latest Kubernetes version.
 Introduction This blog post is a follow up of a post we wrote couple of days ago where we created 3 EC2 instances on AWS.</description>
    </item>
    
    <item>
      <title>Configure AWS instances using Terraform and Gitlab CI/CD</title>
      <link>/devops/2019-11-23-aws_terraform_gitlab/</link>
      <pubDate>Sat, 23 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-23-aws_terraform_gitlab/</guid>
      <description>Introduction In this post, we will deploy EC2 instances on AWS using a CI/CD pipeline. If you want to follow along, it’s advised you also refer to part 1 and part 2 for getting some background information.</description>
    </item>
    
    <item>
      <title>Configure AWS instances with Terraform (remote state with S3)</title>
      <link>/devops/2019-11-22-aws_terraform_remotestate/</link>
      <pubDate>Fri, 22 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-22-aws_terraform_remotestate/</guid>
      <description>Introduction In an earlier post, we created one EC2 instance. As explained in that post, the Terraform state file was created in your local folder.</description>
    </item>
    
    <item>
      <title>Create AWS instances with Terraform</title>
      <link>/devops/2019-11-21-aws_terraform/</link>
      <pubDate>Thu, 21 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-21-aws_terraform/</guid>
      <description>Intoduction In this blogpost, we will create an AWS instance onto EC2 entirely using Terraform. Nothing too complex as such, but better to start with something fairly easy and continue to expand on it.</description>
    </item>
    
    <item>
      <title>DigitalOcean - Install Kubernetes using Ansible</title>
      <link>/devops/2019-10-17_digitalocean_kubernetes_ansible/</link>
      <pubDate>Thu, 17 Oct 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-10-17_digitalocean_kubernetes_ansible/</guid>
      <description>Quick note: the original post dates from 17-10-2019 but got updated at 01-04-2020 with latest Kubernetes version.
 Introduction Couple of weeks ago, we have created a post where we created some servers on DigitalOcean.</description>
    </item>
    
    <item>
      <title>DigitalOcean - Create droplets instances with Terraform</title>
      <link>/devops/2019-09-02_digitalocean_terraform/</link>
      <pubDate>Mon, 02 Sep 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-09-02_digitalocean_terraform/</guid>
      <description>Introduction In this post, we are going to create a server (aka droplets) on DigitalOcean. They will be running Ubuntu. There’s plenty of ways doing it but for this post I decided to give Terraform a try.</description>
    </item>
    
  </channel>
</rss>