<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ACI on Technology Blog Wim</title>
    <link>/tags/aci/</link>
    <description>Recent content in ACI on Technology Blog Wim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Mar 2020 22:32:50 +0100</lastBuildDate>
    
	<atom:link href="/tags/aci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Cisco ACI network with Python (ACI toolkit)</title>
      <link>/networkprogrammability/2020-03-21-aci_python_acitookit/</link>
      <pubDate>Sat, 21 Mar 2020 22:32:50 +0100</pubDate>
      
      <guid>/networkprogrammability/2020-03-21-aci_python_acitookit/</guid>
      <description>Introduction In this post, we have seen how to create some ACI objects using Python and Jinja2. While this was relatively straightforward, it&amp;rsquo;s not always as straigthforward as it seems.</description>
    </item>
    
    <item>
      <title>Interact with Cisco ACI network through Python (Requests)</title>
      <link>/networkprogrammability/2020-03-19-aci_python_requests/</link>
      <pubDate>Thu, 19 Mar 2020 07:39:50 +0100</pubDate>
      
      <guid>/networkprogrammability/2020-03-19-aci_python_requests/</guid>
      <description>Introduction In this blog post, we will address how we can use Python to work with Cisco ACI. It&amp;rsquo;ll focus on the very basics, trusting it gives you enough meat to tackle the more complex tasks on your own (e.</description>
    </item>
    
    <item>
      <title>Use Python requests and Jinja2 to configure ACI</title>
      <link>/networkprogrammability/2020-03-11-aci_python_requests_jinja_part2/</link>
      <pubDate>Wed, 11 Mar 2020 07:39:50 +0100</pubDate>
      
      <guid>/networkprogrammability/2020-03-11-aci_python_requests_jinja_part2/</guid>
      <description>Introduction In a previous post, we introduced how we could interact with Cisco&amp;rsquo;s ACI solution using Python. This post will build on the things we learned in that blog post.</description>
    </item>
    
    <item>
      <title>Create VM on vSphere and network on Cisco ACI (using Terraform)</title>
      <link>/devops/2019-12-03-aci_vsphere_terraform/</link>
      <pubDate>Tue, 03 Dec 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-12-03-aci_vsphere_terraform/</guid>
      <description>Introduction In past couple of posts, we have been experimenting with Terraform in combination with ACI and vSphere seperately. In this post, we will combine both and we will first create network constructs on Cisco&amp;rsquo;s ACI solution and once done, we will create two VM instances on vSphere that are actually using the underlying ACI network constructs.</description>
    </item>
    
    <item>
      <title>Create Cisco ACI network with Terraform and Gitlab CICD</title>
      <link>/devops/2019-11-29-aci_terraform_gitlab/</link>
      <pubDate>Fri, 29 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-29-aci_terraform_gitlab/</guid>
      <description>Introduction As promised, we’ll configure an ACI network using a CI/CD pipeline. If you understood this post, you’ll easily grasp this one as well.</description>
    </item>
    
    <item>
      <title>Create Cisco ACI network with Terraform</title>
      <link>/devops/2019-11-27-aci_terraform/</link>
      <pubDate>Wed, 27 Nov 2019 14:39:50 +0100</pubDate>
      
      <guid>/devops/2019-11-27-aci_terraform/</guid>
      <description>Introduction In this post, we created some EC2 instances on AWS. In this post, we will apply the same principle but instead of creating some servers on AWS, we will create a network on Cisco’s ACI solution using Terraform’s ACI provider.</description>
    </item>
    
  </channel>
</rss>